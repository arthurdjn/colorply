# -*- coding: utf-8 -*-
"""
Created on Sun Jul 14 10:17:54 2019

@author: Cédric Perion | Arthur Dujardin
"""


import numpy as np
from lxml import etree


def readOrientation(nameIMGxml):
    """
    This function extract the rotation matrix from the xml file.
    @param nameIMGxml : the name of the file generated by MM3D. 
    Usually, it is "Orientation-Im[n°i].JPG.xml"
    @paramtype nameIMGxml : string
    :return : the rotation of the img
    :rtype : numpy array 3*3
    """
    
    tree = etree.parse(nameIMGxml)
    
    #The lines of the matrix
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/ParamRotation/CodageMatr/L1"):
        #print(user.text)
        L1 = user.text.split(" ")
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/ParamRotation/CodageMatr/L2"):
        #print(user.text)
        L2 = user.text.split(" ")
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/ParamRotation/CodageMatr/L3"):
        #print(user.text)
        L3 = user.text.split(" ")
        
    matrixRotation = np.array([L1, L2, L3], float)
    return matrixRotation


def readS(nameIMGxml):
    """
    This function extract the images's center from the xml file.
    @param nameIMGxml : the name of the file generated by MM3D. 
    Usually, it is "Orientation-Im[n°i].JPG.xml"
    @paramtype nameIMGxml : string
    :return :the center of the IMG
    :rtype : numpy array 1*3
    """
    
    tree = etree.parse(nameIMGxml)

    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/Centre"):
        #print(user.text)
        S = user.text.split(" ")
        
    center = np.array(S, float)
    return np.transpose(center)


def readOri(nameIMGxml):
    """
    This function extract the rotation matrix from the xml file 
    and extract the images's center from the xml file.
    @param nameIMGxml : the name of the file generated by MM3D. 
    Usually, it is "Orientation-Im[n°i].JPG.xml"
    @paramtype nameIMGxml : string
    :return : the rotation of the img, the center of the IMG
    :rtype : tuple(np.array(matrix rotation), np.array(coord S))
    """
    
    tree = etree.parse(nameIMGxml)
    
    #The lines of the matrix
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/ParamRotation/CodageMatr/L1"):
        #print(user.text)
        L1 = user.text.split(" ")
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/ParamRotation/CodageMatr/L2"):
        #print(user.text)
        L2 = user.text.split(" ")
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/ParamRotation/CodageMatr/L3"):
        #print(user.text)
        L3 = user.text.split(" ")    
    matrixRotation = np.array([L1, L2, L3], float)
    
    for user in tree.xpath("/ExportAPERO/OrientationConique/Externe/Centre"):
        #print(user.text)
        S = user.text.split(" ")
    center = np.array(S, float)
    
    return matrixRotation, center


##

def readCalibF(calibxml):
    """
    This function extract the calibration parameters from the xml file.
    @param calibxml : the name of the calibration file generated by MM3D. 
    Example : "AutoCal_Foc-24000_Cam-DSLRA850.xml"
    @paramtype calibxml : string
    :return : coordinates of the point F (focale, units : pix)
    :rtype : numpy array 1*3
    """

    tree = etree.parse(calibxml)
    
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/PP"):
        PP = user.text.split(" ")
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/F"):
        F = user.text
    PP.append("-" + F)
    return np.transpose(np.array(PP, float))




def readCalibPPS(calibxml):
    """
    This function extract the calibration parameters from the xml file.
    @param calibxml : the name of the calibration file generated by MM3D. 
    Example : "AutoCal_Foc-24000_Cam-DSLRA850.xml"
    @paramtype calibxml : string
    :return : coordinates of the PPS
    :rtype : numpy array 1*3
    """

    tree = etree.parse(calibxml)
    
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/CalibDistortion/ModRad/CDist"):
        PPS = user.text.split(" ")
    
    PPS.append("0")
    print(PPS)
    return np.transpose(np.array(PPS, float))


def readCalibDist(calibxml):
    """
    This function extract the calibration parameters from the xml file.
    @param calibxml : the name of the calibration file generated by MM3D. 
    Example : "AutoCal_Foc-24000_Cam-DSLRA850.xml"
    @paramtype calibxml : string
    :return : distorsion coefficients a, b, c
    :rtype : numpy array 1*3
    """
    
    tree = etree.parse(calibxml)
    
    coeffDist = []
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/CalibDistortion/ModRad/CoeffDist"):
        coeffDist.append(user.text)

    return np.array(coeffDist, float)

##
    
def readSize(calibxml):
    """
    This function extract the size of an image from the xml file.
    @param calibxml : the name of the calibration file generated by MM3D. 
    @paramtype calibxml : string
    :return : the size of the image resolution
    :rtype : np.array
    """
    
    tree = etree.parse(calibxml)

    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/SzIm"):
        size = user.text.split(" ")

    return np.array(size, int)

def readCalib(calibxml):
    """
    This function extract the calibration parameters from the xml file.
    @param calibxml : the name of the calibration file generated by MM3D. 
    Example : "AutoCal_Foc-24000_Cam-DSLRA850.xml"
    @paramtype calibxml : string
    :return : F, PPS, distorsion coefficients a, b, c, size
    :rtype : tuple(F, PPS, [a,b,c], size)
    """
    
    tree = etree.parse(calibxml)
    
    coeffDist = []
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/CalibDistortion/ModRad/CoeffDist"):
        coeffDist.append(user.text)
    coeffDist = np.array(coeffDist, float)
    
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/CalibDistortion/ModRad/CDist"):
        PPS = user.text.split(" ")  
    PPS.append("0")
    PPS = np.array(PPS, float)
    
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/PP"):
        PP = user.text.split(" ")
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/F"):
        F = user.text
    PP.append("-" + F)
    F = np.array(PP, float)
    
    for user in tree.xpath("/ExportAPERO/CalibrationInternConique/SzIm"):
        size = user.text.split(" ")
    size = np.array(size, int)

    return F, PPS, coeffDist, size


    
    
    


if __name__ == "__main__" :
    print("***** Welcome *****\nThis script is used to extract the information contained inside the 'Orientation-Im.JPG.xml' genrerated by MicMac\n\n")
    nameIMGxml = "../example/Orientation-Im3.JPG.xml"
    calibxml = "../example/AutoCal_Foc-24000_Cam-DSLRA850.xml"
    #1/ Matrix Rotation
   
    print("The rotation matrix of the image " + nameIMGxml + " is : \n", readOrientation(nameIMGxml)) 
    
    #2/ Center S of the IMG
    print("\nThe image's center is : \n", readS(nameIMGxml))

    #2.5/ Opti read Orientation
    print("\nThe orientation and center of the image are :\n", readOri(nameIMGxml),"\n")

    #3/ F focale
    
    print("\nThe F point from the camera " + calibxml + " is : \n", readCalibF(calibxml))

    #4/ PPS 
    print("\nThe PPS from the camera " + calibxml + " is : \n", readCalibPPS(calibxml))

    #5/ PPS 
    print("\nThe coefficients a, b, c from the camera " + calibxml + " is : \n", readCalibDist(calibxml))

    #6/ Opti param
    print("\nThe calibration parameters of this image are : \n", readCalib(calibxml))









