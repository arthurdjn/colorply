# -*- coding: utf-8 -*-
"""
Created on Sun Jul 14 10:17:54 2019

@author: CÃ©dric Perion | Arthur Dujardin

Contains reading and writing functions for ply files as well as a conversion function and other useful functions related to ply files
"""

import random as rd
import numpy as np
import plyfile

def readply(fname):
    """ Reads data from the ply file"""
    try:
        ply = open(fname, mode='rb')
    except FileNotFoundError :
        raise FileExistsError
    plydata = plyfile.PlyData.read(ply)
    return plydata

def writeply(plydata, dataChannel, newChannelName,  fname):
    """
    Writes data to the plyfile
    @param data: the data to convert in ply
    @paramtype data: numpy.ndarray
    @param fname: the name of the ply file
    @paramtype fname: string
    :return: ply data
    :rtype: plydata
    """

    dtype = plydata.elements[0].data.dtype.descr
    newdtype = dtype + [(newChannelName, 'u1')]
    
    vertex = plydata.elements[0].name    
    data = []
    for i in range(len(dataChannel)):
         l = tuple( list(plydata[vertex][i]) + [dataChannel[i]])
         data.append(l)
    
    
    data = np.array(data, newdtype)

    el = plyfile.PlyElement.describe(data, 'vertex')
    plyfile.PlyData([el], text=True).write(fname)
    return data

def convertCoordinatesPlyArray(plydata):
    """
    Convert a plydata to a numpy array. The user can choose how many colors to add to each point (R, V, B)
    @plydata : the .ply element
    @plydatatype : plydata
    :return : the coordinates of every points from the cloud
    :rtype : np.array    
    """
    data = np.array([plydata.elements[0].data['x'], 
             plydata.elements[0].data['y'], 
             plydata.elements[0].data['z']])
    #print(len(plydata.elements[0].data['x']))
    #print(len(plydata.elements[0].data['y']))
    #print(len(plydata.elements[0].data['z']))

    return np.transpose(data)


def addChannelFromPly(plydata, coord, channel):
    """
    Add the channel to the numpy data (converted by the function convertCoordinatePlyArray)
    @plydata : the .ply element
    @plydatatype : plydata
    @coord : the data which contains the coordinates of every points
    @coordtype :np.array
    @channel : the name of the channel to add
    @channeltype : string
    :return : data + the colors to the coord data
    :rtype : np.array
    """
    #print(len(np.transpose(plydata.elements[0].data[channel])))
    data = np.column_stack((coord, plydata.elements[0].data[channel]))
    return data

def addChannelGenerated(data, channel_data, channel_names):
    """
    Add a channel (usually generated by a projection into other images) to the numpy data
    @data : the data which contains the coordinates of every points
    @datatype :np.array
    @channel_data : a list of every values of the channel
    @paramtype channel_data : np.array
    @channel_name : the name of the channel to add
    @channeltype : string
    :return : data + the colors to the coord data
    :rtype : np.array
    """
    if len(channel_data) != len(data):
        print("\nERROR : different size between the channel added and the matrix of coordinates points\n\n")
    else:
        coord = np.column_stack((data, channel_data))
    return coord



def convertPlyArray(plydata, channel = "all"):
    data = convertCoordinatesPlyArray(plydata)
    if channel.lower() == "all":
        data = addChannelFromPly(plydata, data, "red")
        data = addChannelFromPly(plydata, data, "green")
        data = addChannelFromPly(plydata, data, "blue")
        
    elif channel.lower() == "red":
        data = addChannelFromPly(plydata, data, "red")
        
    elif channel.lower() == "blue":
        data = addChannelFromPly(plydata, data, "blue")
        
    elif channel.lower() == "green":
        data = addChannelFromPly(plydata, data, "green")

    return data



if __name__ == "__main__" :
    fname = "NuageGREEN.ply"
    plydata = readply(fname)
    
    #1/ Converting the plydata to an array
    data = convertCoordinatesPlyArray(plydata)
    print("The data from the plydata is :\n", data)
    
    #2/ Adding channel
    channel = "green"
    data2 = addChannelFromPly(plydata, data, channel)
    print("\nAdding the channel ", channel, " to the data :\n", data2)
    
    
    n = len(plydata.elements[0].data['x'])
    
    newChannel = [rd.randint(0,255) for k in range(n)]
    channel2 = np.array(newChannel)
    print(channel2)

    print("Test writing")
    data = writeply(plydata, channel2, 'test', "test.ply")
    
    
    
    
    
    